def write():
  main = open("main.py", "w")
  knn = open("knn.py", "w")
  data = open("data.json", "w")
  main.write('import knn\nimport json\n\n#==========Opening data file and converting hex to decimal==========\nrawData = open("data.json", "r")\ndata = json.loads(rawData.read())\nfor i in range(len(data["data"])):\n  for color in range(len(data["data"][i])):\n    data["data"][i][color] = int(data["data"][i][color], 16)\ndata_train = data["data"]\ntarget_train = data["target"]\nidentifiers = data["identifiers"]\n\nknn.train(data_train, target_train)\n\nrunning = True\nprint("type exit to exit")\nwhile running == True:\n  predict = input("Input hex code:")\n  if predict == "exit":\n    break\n \n  if len(predict) != 6:\n    print("Please enter a six-digit color hex code.")\n    continue\n  part_1_predict = int(predict[:2], 16)\n  part_2_predict = int(predict[2:4], 16)\n  part_3_predict = int(predict[4:], 16)\n\n  predict = [[part_1_predict, part_2_predict, part_3_predict]]\n\n  prediction = knn.predict(predict)\n  print("Predicted color: " + identifiers[prediction])')
  print("main.py writen")
  data.write('{"data" : [["FF", "00", "00"], ["00", "FF", "00"], ["00", "00", "FF"], ["FF", "FF", "FF"], ["00", "00", "00"]], "target" : [0, 1, 2, 3, 4], "identifiers" : ["red", "blue", "green", "white", "black"]}')
  print("data.json writen")
  knn.write('data = []\ntarget = []\ndata_object_length = []\ntrained = False\ndef train(data_train, target_train):\n#==========Checking types and lengths==========\n  if type(data_train) == list:\n    legal = True\n    length = 0\n    if type(data_train[0]) == list:\n      length = len(data_train[0])\n    else:\n      legal = False\n      raise Exception("Expected 2d array. 1d array provided.")\n    for data_object in data_train:\n      if type(data_object) == list:\n        if len(data_object) != length:\n          legal = False\n          raise Exception("Inconsistent object lengths.")\n      else:\n        raise Exception("Expected 2d array. 1d array provided.")\n        legal = False\n  if type(target_train) == list:\n    if legal == True:\n      if len(data_train) != len(target_train):\n        legal = False\n        raise Exception("Inconsistent array lengths. Excpected: " + len(data_train) + ", " + len(data_train) + " Got: " + len(data_train) + ", " + len(target_train))\n  else:\n    legal = False\n    raise Exception("Expected list (array). Got " + type(target_train))\n  \n#==========The functional part of this function=========\n  if legal == True:\n    global data\n    data = data_train\n    global target\n    target = target_train\n    global data_object_length\n    data_object_length = len(data_train[0])\n    global trained\n    trained = True\n\n\n\ndef predict(data_new):\n#==========Checking if new data has consistent formatting with training data=========\n  legal = True\n  if trained == True:\n    if type(data_new) == list:\n      if len(data_new) == 1:\n        if type(data_new[0]) == list:\n          if len(data_new[0]) != data_object_length:\n            legal = False\n            raise Exception("Inconsistent list (array) lengths. Expected: " + data_object_length + " Got: " + len(data_new[0]))\n        else:\n          legal = False\n          raise Exception("Expected 2d array. Got 1d array.")\n      else:\n        legal = False\n        raise Exception("Please keep array length to 1")\n    else:\n      legal = False\n      raise Exception("Expected list (array). Got " + str(type(data_new)))\n  else:\n    legal = False\n    raise Exception("Please train data first using train(training_data, training_target) function.")\n  \n#==========The functional part of the function==========\n  if legal == True:\n    highest_object = "Null"\n    highest_score = "Null"\n    for data_object in range(len(data)):\n      score = 0\n      for data_index in range(len(data[data_object])):\n        score = score + abs(data_new[0][data_index] - data[data_object][data_index])\n\n      if highest_score == "Null":\n        highest_score = score\n        highest_object = data_object\n      \n      if score < highest_score:\n        highest_score = score\n        highest_object = data_object\n  return(target[highest_object])')
  print("knn.py writen")
  main.close()
  data.close()
  knn.close()
write()
